'use strict';

var Sequelize = require("sequelize");
var config = require('../../utils/config').config;
var utils = require('../../utils/utils').utils;
var session = require("../session");

var model = {}

// ################## Util Models #######################
model.Company = require("./company")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.CompanyContact = require("./company_contacts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Role = require("./roles")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Mail = require("./mails")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Sms = require("./smses")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.SelfcareLink = require("./selfcare_links")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.RefSequence = require("./ref_sequences")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ExternalSystem = require("./external_systems")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.OpexCategory = require("./opex_categories")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.OpexType = require("./opex_types")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.SkuCategory = require("./sku_categories")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.SkuType = require("./sku_types")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.SkuUnit = require("./sku_units")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Sku = require("./skus")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Asset = require("./assets")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.AssetItem = require("./asset_items")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.AssetItemAssignment = require("./asset_item_assignments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.AssetItemMovement = require("./asset_item_movements")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.AssetStore = require("./asset_stores")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.AssetServiceProvider = require("./asset_service_providers")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.AssetWarrenty = require("./asset_warrenties")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Country = require("./countries")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.City = require("./cities")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Location = require("./locations")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Client = require("./clients")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ClientEmployee = require("./client_employees")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Desk = require("./desks")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Cabin = require("./cabins")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Floor = require("./floors")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Building = require("./buildings")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingAmcItem = require("./building_amc_items")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingAmc = require("./building_amcs")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingImage = require("./building_images")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingContact = require("./building_contacts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingContractTerm = require("./building_contract_terms")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingProperty = require("./building_properties")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PropertyImage = require("./building_property_images")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PropertyContact = require("./building_property_contacts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PropertyContract = require("./building_property_contracts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PropertyContractNegotiation = require("./building_property_contract_negotiations")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingService = require("./building_services")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BuildingServiceAssignee = require("./building_service_assignees")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Office = require("./offices")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.OfficePricing = require("./office_pricings")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Facility = require("./facilities")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.FacilitySet = require("./facility_sets")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.SetFacility = require("./facility_set_facilities")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Booking = require("./bookings")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BookedDesk = require("./booked_desks")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BookingMail = require("./booking_mails")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Contract = require("./contracts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ContractTerm = require("./contract_terms")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ContractAdditionalInvoice = require("./contract_additional_invoices")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ExitRequest = require("./exit_requests")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ExitAcr = require("./exit_acrs")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ExitDeduction = require("./exit_deductions")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ExitComment = require("./exit_comments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Priority = require("./ticket_priorities")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Doc = require("./docs")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.History = require("./history")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.CreditUsed = require("./credits_used")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.CreditEntry = require("./credits_entry")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Invoice = require("./invoices")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.InvoiceItem = require("./invoice_items")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.InvoiceService = require("./invoice_services")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Payment = require("./payments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.UrnPayment = require("./urn_payments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PayoutBenificiary = require("./payout_benificiaries")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PayoutPayment = require("./payout_payments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PayoutEntry = require("./payout_entries")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PayinEntry = require("./payin_entries")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PgTransaction = require("./pg_transactions")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PgTransactionRequest = require("./pg_transaction_requests")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PgTransactionResponse = require("./pg_transaction_responses")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PettyCashAccount = require("./petty_cash_accounts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PettyCashAccountUser = require("./petty_cash_account_users")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.DebitCardAccount = require("./debit_card_accounts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.DebitCardAccountUser = require("./debit_card_account_users")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Resource = require("./resources")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ResourceImage = require("./resource_images")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ResourceBooking = require("./resource_bookings")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.System = require("./systems")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Ticket = require("./tickets")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketMessage = require("./ticket_messages")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketMail = require("./ticket_mails")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketAttachment = require("./ticket_attachments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketStatusHistory = require("./ticket_status_history")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketAssignmentHistory = require("./ticket_assignment_history")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketCategory = require("./ticket_categories")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketSubCategory = require("./ticket_sub_categories")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketContext = require("./ticket_contexts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TicketExpense = require("./ticket_expenses")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Lead = require("./leads")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.LeadComment = require("./lead_comments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.LeadProposition = require("./lead_propositions")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PropositionQuote = require("./proposition_quotes")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PriceQuote = require("./price_quotes")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PriceContract = require("./price_contracts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.LeadMail = require("./lead_mails")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Visit = require("./visits")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Schedule = require("./schedules")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.User = require("./users")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.UserRole = require("./user_roles")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.UserNotification = require("./user_notifications")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.UserMessage = require("./user_messages")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Call = require("./calls")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Subscription = require("./vm_subscriptions")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Visitor = require("./vm_visitors")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VmVisit = require("./vm_visits")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.OtpPassword = require("./otp_passwords")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Vendor = require("./vendors")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VendorContact = require("./vendor_contacts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VendorBankAccount = require("./vendor_bank_accounts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VendorPaymentTerm = require("./vendor_payment_terms")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VendorSku = require("./vendor_skus")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VendorTdsDeduction = require("./vendor_tds_deductions")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.VendorSkuPricing = require("./vendor_sku_pricings")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.WorkOrder = require("./vendor_work_orders")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.WorkItem = require("./vendor_work_items")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Project = require("./vendor_projects")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseOrder = require("./vendor_purchase_orders")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseOrderInvoice = require("./vendor_purchase_order_invoices")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseOrderInvoiceGst = require("./vendor_purchase_order_invoice_gsts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseItem = require("./vendor_purchase_items")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseItemDelivery = require("./vendor_purchase_item_deliveries")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseItemStatus = require("./vendor_purchase_item_statuses")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseItemStatusImage = require("./vendor_purchase_item_status_images")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.PurchaseOrderMilestone = require("./vendor_purchase_order_milestones")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TdsComplianceTerm = require("./vendor_tds_compliance_terms")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.GstComplianceTerm = require("./vendor_gst_compliance_terms")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.TdsPayment = require("./vendor_tds_payments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ProviderService = require("./service_provider_services")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Provider = require("./service_providers")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ProviderContact = require("./service_provider_contacts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ProviderBankAccount = require("./service_provider_bank_accounts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ProviderPortal = require("./service_provider_portals")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ProviderPayment = require("./service_provider_payments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.OpexPayment = require("./opex_recurring_payments")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.OpexBill = require("./opex_bills")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BillsQueue = require("./bills_queue")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BillsQueueGst = require("./bill_queue_gsts")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ProviderBill = require("./service_provider_bills")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ArCallHistory = require("./ar_calls_history")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Activity = require("./activities")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.MiData = require("./mi_data")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.HelpNote = require("./help_notes")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.BusinessTerm = require("./business_terms")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.Notification = require("./notifications")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.NotificationReceiver = require("./notification_receivers")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));

//------------------ parking_lots ---------------------------//
model.ParkingLots = require("./parking_lots")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ParkingSpots= require("./parking_spots")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ParkingBookedSpots= require("./parking_booked_spots")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));
model.ParkingBookings= require("./parking_bookings")(session.db, Sequelize.DataTypes, utils.clone(config.dbTableOptions));

model.ParkingBookedSpots.belongsTo(model.ParkingLots, { foreignKey: 'parkingLotId', as: 'parkingLots' });
model.ParkingLots.hasMany(model.ParkingBookedSpots, {as:'parkingBookedSpots', foreignKey: 'parkingLotId' });
// model.ParkingSpots.belongsTo(model.ParkingLots, { foreignKey: 'parkingLotId', as: 'parkingLots' });
model.ParkingSpots.belongsTo(model.ParkingLots, { foreignKey: 'parkingLotId', as: 'parkingLots' });
model.ParkingLots.hasMany(model.ParkingSpots, {as:'parkingSpots', foreignKey: 'parkingLotId' });
model.Building.hasMany(model.ParkingLots, {as:'parkingLots', foreignKey: 'buildingId' });
model.ParkingBookedSpots.belongsTo(model.ParkingSpots, { foreignKey: 'parkingSpotId', as: 'parkingSpots' });
model.ParkingBookings.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
model.ParkingBookings.belongsTo(model.Client, { foreignKey: 'clientId', as: 'client' });
model.ParkingBookings.belongsTo(model.Contract, { foreignKey: 'contractId', as: 'contract' });
// model.Booking.hasMany(model.BookedDesk, { foreignKey: 'bookingId', as: 'bookedDesks' });
// model.Booking.hasMany(model.Payment, { foreignKey: 'bookingId', as: 'payments' });
// model.Booking.hasMany(model.Invoice, { foreignKey: 'bookingId', as: 'invoices' });

// --------------------------  ----------------------------- //

model.MiData.belongsTo(model.City, { foreignKey: 'cityId', as: 'city' });
model.NotificationReceiver.belongsTo(model.Notification, { foreignKey: 'notificationId', as: 'notification' });
model.Notification.hasMany(model.NotificationReceiver, { foreignKey: 'notificationId', as: 'notificationReceivers' });
model.User.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
// model.User.hasMany(model.UserRole, { foreignKey: 'userId', as: 'roles' });
model.UserRole.belongsTo(model.User, { foreignKey: 'userId', as: 'user' });
model.UserRole.belongsTo(model.Role, { foreignKey: 'roleId', as: 'role' });
model.User.belongsToMany(model.Role, { through: model.UserRole, foreignKey: 'userId', as: 'userRoles' });
model.Role.belongsToMany(model.User, { through: model.UserRole, foreignKey: 'roleId', as: 'users' });

model.Company.hasMany(model.User, { foreignKey: 'companyId', as: 'users' });
model.Company.hasMany(model.CompanyContact, { foreignKey: 'companyId', as: 'contacts' });
model.SkuCategory.hasMany(model.SkuType, { foreignKey: 'catId', as: 'types' });
model.SkuType.hasMany(model.Sku, { foreignKey: 'typeId', as: 'skus' });
model.Sku.belongsTo(model.SkuCategory, { foreignKey: 'catId', as: 'category' });
model.Sku.belongsTo(model.SkuType, { foreignKey: 'typeId', as: 'type' });
model.Asset.belongsTo(model.Project, { foreignKey: 'projectId', as: 'project' });
model.Asset.belongsTo(model.PurchaseOrder, { foreignKey: 'purchaseOrderId', as: 'purchaseOrder' });
model.Asset.belongsTo(model.PurchaseItem, { foreignKey: 'purchaseItemId', as: 'purchaseItem' });
model.Asset.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.Asset.belongsTo(model.AssetServiceProvider, { foreignKey: 'assetServiceProviderId', as: 'serviceProvider' });
model.Asset.hasOne(model.AssetWarrenty, { foreignKey: 'assetId', as: 'warrenty' });
model.Asset.belongsTo(model.Sku, { foreignKey: 'skuId', as: 'sku' });
model.Asset.belongsTo(model.SkuCategory, { foreignKey: 'skuCatId', as: 'category' });
model.Asset.hasMany(model.AssetItem, { foreignKey: 'assetId', as: 'items' });
model.AssetItem.belongsTo(model.Asset, { foreignKey: 'assetId', as: 'asset' });
model.AssetItemAssignment.belongsTo(model.AssetItemMovement, { foreignKey: 'assetMovementId', as: 'movement' });
model.AssetItemAssignment.belongsTo(model.AssetItem, { foreignKey: 'assetItemId', as: 'item' });
model.AssetItemAssignment.belongsTo(model.Desk, { foreignKey: 'deskId', as: 'desk' });
model.AssetItemAssignment.belongsTo(model.Cabin, { foreignKey: 'cabinId', as: 'cabin' });
model.AssetItemAssignment.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.AssetItemAssignment.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.Building.hasMany(model.AssetItemAssignment, { foreignKey: 'buildingId', as: 'assets' });
model.Office.hasMany(model.AssetItemAssignment, { foreignKey: 'officeId', as: 'assets' });
model.Cabin.hasMany(model.AssetItemAssignment, { foreignKey: 'cabinId', as: 'assets' });
model.AssetItemMovement.belongsTo(model.AssetItem, { foreignKey: 'assetItemId', as: 'item' });
model.AssetItem.hasOne(model.AssetItemAssignment, { foreignKey: 'assetItemId', as: 'assignment' });
model.AssetItem.hasMany(model.AssetItemAssignment, { foreignKey: 'assetItemId', as: 'assignments' });
model.AssetItem.hasMany(model.AssetItemMovement, { foreignKey: 'assetItemId', as: 'movements' });
model.AssetItemMovement.belongsTo(model.AssetStore, { foreignKey: 'storeId', as: 'store' });
model.AssetItemMovement.belongsTo(model.AssetServiceProvider, { foreignKey: 'assetServiceProviderId', as: 'serviceProvider' });
model.AssetItemMovement.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.AssetItemMovement.belongsTo(model.Doc, { foreignKey: 'pdfId', as: 'pdf' });
model.AssetServiceProvider.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.AssetStore.belongsTo(model.Location, { foreignKey: 'locationId', as: 'location' });
model.AssetStore.belongsTo(model.User, { foreignKey: 'managerId', as: 'manager' });


model.Project.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.Project.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.Project.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.Vendor.belongsTo(model.City, { foreignKey: 'cityId', as: 'city' });
model.Vendor.hasOne(model.VendorContact, { foreignKey: 'vendorId', as: 'contact' });
model.Vendor.hasMany(model.VendorContact, { foreignKey: 'vendorId', as: 'contacts' });
model.Vendor.hasMany(model.VendorSku, { foreignKey: 'vendorId', as: 'skus' });
model.Vendor.hasMany(model.VendorBankAccount, { foreignKey: 'vendorId', as: 'bankAccounts' });
model.Vendor.hasOne(model.VendorBankAccount, { foreignKey: 'vendorId', as: 'bankAccount' });
model.Vendor.hasMany(model.VendorTdsDeduction, { foreignKey: 'vendorId', as: 'tdsDeductions' });
model.VendorContact.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.VendorTdsDeduction.belongsTo(model.PurchaseOrderMilestone, { foreignKey: 'milestoneId', as: 'milestone' });
model.VendorTdsDeduction.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.VendorContact.belongsTo(model.Doc, { foreignKey: 'idProofId', as: 'idProof' });
model.VendorContact.belongsTo(model.Doc, { foreignKey: 'addressProofId', as: 'addressProof' });
model.VendorBankAccount.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.VendorPaymentTerm.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.VendorSku.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.VendorSku.belongsTo(model.Sku, { foreignKey: 'skuId', as: 'sku' });
model.VendorSku.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.VendorSku.hasMany(model.VendorSkuPricing, { foreignKey: 'vendorSkuId', as: 'pricings' });
model.VendorSkuPricing.belongsTo(model.VendorSku, { foreignKey: 'vendorSkuId', as: 'vendorSku' });
model.VendorSkuPricing.belongsTo(model.VendorPaymentTerm, { foreignKey: 'paymentTermId', as: 'paymentTerm' });
model.WorkOrder.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.WorkOrder.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.WorkOrder.belongsTo(model.Project, { foreignKey: 'projectId', as: 'project' });
model.WorkOrder.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
model.WorkOrder.belongsTo(model.AssetStore, { foreignKey: 'deliveryStoreId', as: 'deliveryStore' });
model.WorkOrder.belongsTo(model.VendorPaymentTerm, { foreignKey: 'paymentTermId', as: 'paymentTerm' });
model.WorkOrder.hasMany(model.WorkItem, { foreignKey: 'workOrderId', as: 'items' });
model.WorkOrder.hasOne(model.PurchaseOrder, { foreignKey: 'workOrderId', as: 'purchaseOrder' });
model.WorkItem.belongsTo(model.WorkOrder, { foreignKey: 'workOrderId', as: 'workOrder' });
model.WorkItem.belongsTo(model.Sku, { foreignKey: 'skuId', as: 'sku' });
model.PurchaseOrder.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.PurchaseOrder.belongsTo(model.WorkOrder, { foreignKey: 'workOrderId', as: 'workOrder' });
model.PurchaseOrder.belongsTo(model.AssetStore, { foreignKey: 'deliveryStoreId', as: 'deliveryStore' });
model.PurchaseOrder.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.PurchaseOrder.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.PurchaseOrder.belongsTo(model.Project, { foreignKey: 'projectId', as: 'project' });
model.PurchaseOrder.belongsTo(model.OpexPayment, { foreignKey: 'opexPaymentId', as: 'opexPayment' });
model.PurchaseOrder.belongsTo(model.VendorBankAccount, { foreignKey: 'vendorBankAccountId', as: 'vendorBankAccount' });
model.PurchaseOrderInvoice.belongsTo(model.PurchaseOrder, { foreignKey: 'purchaseOrderId', as: 'purchaseOrder' });
model.PurchaseOrder.hasMany(model.PurchaseOrderInvoice, { foreignKey: 'purchaseOrderId', as: 'invoices' });
model.PurchaseOrderInvoice.hasMany(model.PurchaseOrderInvoiceGst, { foreignKey: 'purchaseOrderInvoiceId', as: 'gstSlabs' });
model.PurchaseOrder.hasOne(model.PurchaseItem, { foreignKey: 'purchaseOrderId', as: 'item' });
model.PurchaseOrder.hasMany(model.PurchaseItem, { foreignKey: 'purchaseOrderId', as: 'items' });
model.PurchaseOrder.hasOne(model.PurchaseOrderMilestone, { foreignKey: 'purchaseOrderId', as: 'milestone' });
model.PurchaseOrder.hasMany(model.PurchaseOrderMilestone, { foreignKey: 'purchaseOrderId', as: 'milestones' });
model.PurchaseOrderMilestone.belongsTo(model.PurchaseOrder, { foreignKey: 'purchaseOrderId', as: 'purchaseOrder' });
model.PurchaseOrderMilestone.belongsTo(model.PurchaseItem, { foreignKey: 'purchaseItemId', as: 'purchaseItem' });
model.PurchaseOrderMilestone.belongsTo(model.PayoutPayment, { foreignKey: 'payoutId', as: 'payout' });
model.PurchaseOrderMilestone.hasMany(model.PurchaseOrderMilestone, { foreignKey: 'parentMilestoneId', as: 'milestones' });
model.PurchaseItem.belongsTo(model.PurchaseOrder, { foreignKey: 'purchaseOrderId', as: 'purchaseOrder' });
model.PurchaseItem.belongsTo(model.VendorPaymentTerm, { foreignKey: 'paymentTermId', as: 'paymentTerm' });
model.PurchaseItem.belongsTo(model.Sku, { foreignKey: 'skuId', as: 'sku' });
model.PurchaseItem.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.PurchaseItem.hasMany(model.PurchaseItemStatus, { foreignKey: 'purchaseItemId', as: 'statuses' });
model.PurchaseItem.hasMany(model.PurchaseItemDelivery, { foreignKey: 'purchaseItemId', as: 'deliveries' });
model.PurchaseItemDelivery.belongsTo(model.PurchaseItem, { foreignKey: 'purchaseItemId', as: 'purchaseItem' });
model.PurchaseItemStatus.belongsTo(model.PurchaseItem, { foreignKey: 'purchaseItemId', as: 'purchaseItem' });
model.PurchaseItemStatus.belongsTo(model.PurchaseOrderMilestone, { foreignKey: 'mileStoneId', as: 'mileStone' });
model.PurchaseItemStatus.hasMany(model.PurchaseItemStatusImage, { foreignKey: 'vendorPurchaseItemStatusId', as: 'images' });
model.PurchaseItemStatusImage.belongsTo(model.Doc, { foreignKey: 'imageId', as: 'image' });
model.PurchaseOrderInvoice.belongsTo(model.Doc, { foreignKey: 'docId', as: 'file' });
model.PurchaseOrderInvoice.belongsTo(model.Doc, { foreignKey: 'gstFileId', as: 'gstFile' });
model.PurchaseOrder.belongsTo(model.Doc, { foreignKey: 'pdfId', as: 'pdf' });
model.PurchaseOrder.belongsTo(model.PurchaseOrderInvoice, { foreignKey: 'taxInvoiceId', as: 'taxInvoice' });
model.TdsPayment.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.TdsPayment.belongsTo(model.TdsComplianceTerm, { foreignKey: 'complianceTermId', as: 'complianceTerm' });
model.TdsPayment.belongsTo(model.Doc, { foreignKey: 'tdsFileId', as: 'file' });

model.Provider.belongsTo(model.ProviderService, { foreignKey: 'serviceId', as: 'service' });
model.Provider.hasMany(model.ProviderContact, { foreignKey: 'serviceProviderId', as: 'providerContacts' });
model.Provider.hasOne(model.ProviderContact, { foreignKey: 'serviceProviderId', as: 'providerContact' });
model.Provider.hasOne(model.ProviderBankAccount, { foreignKey: 'serviceProviderId', as: 'bankAccount' });
model.Provider.hasOne(model.ProviderPortal, { foreignKey: 'serviceProviderId', as: 'portal' });
model.ProviderPayment.belongsTo(model.Provider, { foreignKey: 'serviceProviderId', as: 'serviceProvider' });
model.ProviderPayment.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.ProviderPayment.belongsTo(model.ProviderService, { foreignKey: 'serviceId', as: 'service' });
model.ProviderPayment.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.ProviderPayment.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.Office.hasMany(model.ProviderPayment, { foreignKey: 'officeId', as: 'servicePayments' });
model.ProviderBill.belongsTo(model.PayoutPayment, { foreignKey: 'payoutPaymentId', as: 'payoutPayment' });
model.ProviderBill.belongsTo(model.ProviderPayment, { foreignKey: 'servicePaymentId', as: 'servicePayment' });
model.ProviderPayment.hasMany(model.ProviderBill, { foreignKey: 'servicePaymentId', as: 'serviceBills' });

model.OpexCategory.hasMany(model.OpexType, { foreignKey: 'catId', as: 'types' });
model.OpexType.hasMany(model.OpexType, { foreignKey: 'typeId', as: 'items' });
model.OpexType.belongsTo(model.OpexCategory, { foreignKey: 'catId', as: 'category' });
model.OpexType.belongsTo(model.OpexType, { foreignKey: 'typeId', as: 'type' });
model.Provider.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.OpexPayment.belongsTo(model.Provider, { foreignKey: 'serviceProviderId', as: 'serviceProvider' });
model.OpexPayment.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.OpexPayment.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.OpexPayment.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.OpexPayment.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.OpexBill.belongsTo(model.PayoutPayment, { foreignKey: 'payoutPaymentId', as: 'payoutPayment' });
model.OpexBill.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.OpexBill.belongsTo(model.OpexPayment, { foreignKey: 'opexPaymentId', as: 'opexPayment' });
model.OpexBill.belongsTo(model.Provider, { foreignKey: 'serviceProviderId', as: 'serviceProvider' });
model.OpexBill.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.OpexBill.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.OpexBill.belongsTo(model.Doc, { foreignKey: 'imageId', as: 'image' });
model.OpexPayment.hasMany(model.OpexBill, { foreignKey: 'opexPaymentId', as: 'opexBills' });
model.BillsQueue.belongsTo(model.Provider, { foreignKey: 'serviceProviderId', as: 'serviceProvider' });
model.BillsQueue.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.BillsQueue.belongsTo(model.Project, { foreignKey: 'projectId', as: 'project' });
model.BillsQueue.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.BillsQueue.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.BillsQueue.belongsTo(model.Vendor, { foreignKey: 'vendorId', as: 'vendor' });
model.BillsQueue.belongsTo(model.Doc, { foreignKey: 'imageId', as: 'image' });
model.BillsQueue.belongsTo(model.Doc, { foreignKey: 'gstFileId', as: 'gstFile' });
model.BillsQueue.hasMany(model.BillsQueueGst, { foreignKey: 'billId', as: 'gstSlabs' });

model.City.belongsTo(model.Country, { foreignKey: 'countryId', as: 'country' });
model.Country.hasMany(model.City, { foreignKey: 'countryId', as: 'cities' });
model.Location.belongsTo(model.City, { foreignKey: 'cityId', as: 'city' });
model.City.hasMany(model.Location, { foreignKey: 'cityId', as: 'locations' });
model.Location.hasMany(model.Building, { foreignKey: 'locationId', as: 'buildings' });
model.BuildingContact.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.Building.belongsTo(model.Location, { foreignKey: 'locationId', as: 'location' });
model.Building.belongsTo(model.Doc, { foreignKey: 'agreementId', as: 'agreement' });
model.Building.hasMany(model.Office, { foreignKey: 'buildingId', as: 'offices' });
model.Building.hasMany(model.BuildingContact, { foreignKey: 'buildingId', as: 'contacts' });
model.Building.hasMany(model.BuildingService, { foreignKey: 'buildingId', as: 'services' });
model.Building.hasMany(model.BuildingContractTerm, { foreignKey: 'buildingId', as: 'terms' });
model.BuildingService.hasMany(model.BuildingServiceAssignee, { foreignKey: 'buildingServiceId', as: 'assignees' });
model.BuildingServiceAssignee.belongsTo(model.User, { foreignKey: 'userId', as: 'user' });
model.Building.hasMany(model.BuildingAmc, { foreignKey: 'buildingId', as: 'amcs' });
model.BuildingAmc.belongsTo(model.BuildingAmcItem, { foreignKey: 'amcItemId', as: 'amcItem' });
model.BuildingAmc.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });

model.BuildingProperty.belongsTo(model.Location, { foreignKey: 'locationId', as: 'location' });
model.BuildingProperty.hasMany(model.PropertyContact, { foreignKey: 'propertyId', as: 'contacts' });
model.BuildingProperty.hasOne(model.PropertyContract, { foreignKey: 'propertyId', as: 'contract' });
model.PropertyContract.hasMany(model.PropertyContractNegotiation, { foreignKey: 'propertyContractId', as: 'negotiations' });

model.Office.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.Floor.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.Office.hasMany(model.Floor, { foreignKey: 'id', as: 'floors' });
model.Office.hasMany(model.OfficePricing, { foreignKey: 'officeId', as: 'pricings' });
model.OfficePricing.belongsTo(model.FacilitySet, { foreignKey: 'facilitySetId', as: 'facilitySet' });
model.Cabin.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.Cabin.belongsTo(model.Floor, { foreignKey: 'floorId', as: 'floor' });
model.Office.hasMany(model.Cabin, { foreignKey: 'id', as: 'cabins' });
model.Floor.hasMany(model.Cabin, { foreignKey: 'floorId', as: 'cabins' });
model.Desk.belongsTo(model.Cabin, { foreignKey: 'cabinId', as: 'cabin' });
model.Cabin.hasMany(model.Desk, { foreignKey: 'cabinId', as: 'desks' });

model.Building.belongsToMany(model.Doc, { through: model.BuildingImage, foreignKey: 'buildingId', as: 'images' });
model.Doc.belongsToMany(model.Building, { through: model.BuildingImage, foreignKey: 'imageId', as: 'buildings' });

model.BuildingProperty.belongsToMany(model.Doc, { through: model.PropertyImage, foreignKey: 'propertyId', as: 'images' });
model.Doc.belongsToMany(model.BuildingProperty, { through: model.PropertyImage, foreignKey: 'imageId', as: 'properties' });

model.FacilitySet.belongsToMany(model.Facility, { through: model.SetFacility, foreignKey: 'setId', as: 'facilities' });
model.Facility.belongsToMany(model.FacilitySet, { through: model.SetFacility, foreignKey: 'facilityId', as: 'facilitySets' });

model.Booking.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
model.Booking.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.Booking.belongsTo(model.Client, { foreignKey: 'clientId', as: 'client' });
model.Booking.belongsTo(model.Contract, { foreignKey: 'contractId', as: 'contract' });
model.Booking.hasOne(model.Contract, { foreignKey: 'bookingId', as: 'futureContract' });
model.Booking.hasMany(model.BookedDesk, { foreignKey: 'bookingId', as: 'bookedDesks' });
model.Booking.hasMany(model.Payment, { foreignKey: 'bookingId', as: 'payments' });
model.Booking.hasMany(model.Invoice, { foreignKey: 'bookingId', as: 'invoices' });
model.Booking.hasMany(model.ExitRequest, { foreignKey: 'bookingId', as: 'exitRequests' });
model.Booking.belongsTo(model.ExitRequest, { foreignKey: 'exitRequestId', as: 'exitRequest' });
model.ArCallHistory.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.ExitRequest.belongsTo(model.Doc, { foreignKey: 'finalStatementId', as: 'finalStatement' });
model.ExitRequest.belongsTo(model.Doc, { foreignKey: 'exitFormId', as: 'exitForm' });
model.ExitRequest.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.ExitRequest.hasMany(model.ExitAcr, { foreignKey: 'exitRequestId', as: 'acrs' });
model.ExitRequest.hasMany(model.ExitDeduction, { foreignKey: 'exitRequestId', as: 'deductions' });
model.ExitRequest.hasMany(model.ExitComment, { foreignKey: 'exitRequestId', as: 'comments' });
model.Schedule.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.Schedule.belongsTo(model.User, { foreignKey: 'assignedTo', as: 'assigned' });
model.Client.hasOne(model.Booking, { foreignKey: 'clientId', as: 'booking' });
model.Client.hasMany(model.ClientEmployee, { foreignKey: 'clientId', as: 'employees' });
model.ClientEmployee.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
model.ClientEmployee.belongsTo(model.Client, { foreignKey: 'clientId', as: 'client' });
model.Client.hasMany(model.PayoutBenificiary, { foreignKey: 'clientId', as: 'benificiaries' });
model.PayoutBenificiary.belongsTo(model.Client, { foreignKey: 'clientId', as: 'client' });
model.BookedDesk.belongsTo(model.Desk, { foreignKey: 'deskId', as: 'desk' });
model.Invoice.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.Invoice.belongsTo(model.Doc, { foreignKey: 'pdfId', as: 'pdf' });
model.Invoice.belongsTo(model.Doc, { foreignKey: 'parkingPdfId', as: 'parkingPdf' });
model.Invoice.belongsTo(model.InvoiceService, { foreignKey: 'invoiceServiceId', as: 'invoiceService' });
model.Invoice.hasMany(model.InvoiceItem, { foreignKey: 'invoiceId', as: 'items' });
model.InvoiceItem.belongsTo(model.InvoiceService, { foreignKey: 'invoiceServiceId', as: 'invoiceService' });
model.Payment.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.Payment.hasMany(model.Invoice, { foreignKey: 'paymentId', as: 'invoices' });
model.PayinEntry.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.PayinEntry.belongsTo(model.PayinEntry, { foreignKey: 'linkedId', as: 'linkedTo' });
model.PayinEntry.hasMany(model.PgTransaction, { foreignKey: 'payinEntryId', as: 'pgTransactions' });
model.PgTransaction.belongsTo(model.PayinEntry, { foreignKey: 'payinEntryId', as: 'payIn' });
model.PgTransaction.belongsTo(model.Payment, { foreignKey: 'paymentId', as: 'payment' });
model.PgTransaction.hasMany(model.PgTransactionRequest, { foreignKey: 'pgTransactionId', as: 'requests' });
model.PgTransaction.hasMany(model.PgTransactionResponse, { foreignKey: 'pgTransactionId', as: 'responses' });
model.PayoutPayment.belongsTo(model.PayoutBenificiary, { foreignKey: 'payoutBenificiaryId', as: 'benificiary' });
model.PayoutPayment.belongsTo(model.ExitRequest, { foreignKey: 'exitRequestId', as: 'exitRequest' });
model.PayoutPayment.belongsTo(model.PurchaseOrder, { foreignKey: 'purchaseOrderId', as: 'purchaseOrder' });
model.PayoutPayment.belongsTo(model.OpexBill, { foreignKey: 'providerBillId', as: 'opexBill' });
// model.PayoutPayment.belongsTo(model.ProviderBill, { foreignKey: 'providerBillId', as: 'providerBill' });
// model.PayoutEntry.belongsTo(model.PayoutBenificiary, { foreignKey: 'payoutBenificiaryId', as: 'benificiary' });
model.PayoutEntry.belongsTo(model.PayoutEntry, { foreignKey: 'linkedId', as: 'linkedTo' });
model.PayoutEntry.belongsTo(model.PayoutPayment, { foreignKey: 'payoutPaymentId', as: 'payoutPayment' });
model.PayoutEntry.belongsTo(model.OpexType, { foreignKey: 'opexTypeId', as: 'opexType' });
model.PayoutEntry.belongsTo(model.PettyCashAccount, { foreignKey: 'pettyCashAccountId', as: 'pettyCashAccount' });
model.PayoutEntry.belongsTo(model.DebitCardAccount, { foreignKey: 'debitCardAccountId', as: 'debitCardAccount' });
model.PayoutEntry.belongsTo(model.Building, { foreignKey: 'buildingId', as: 'building' });
model.PettyCashAccount.hasMany(model.PettyCashAccountUser, { foreignKey: 'pettyCashAccountId', as: 'accountUsers' });
model.PettyCashAccountUser.belongsTo(model.User, { foreignKey: 'userId', as: 'user' });
model.DebitCardAccount.belongsTo(model.Provider, { foreignKey: 'serviceProviderId', as: 'serviceProvider' });
model.DebitCardAccount.hasMany(model.DebitCardAccountUser, { foreignKey: 'debitCardAccountId', as: 'accountUsers' });
model.DebitCardAccountUser.belongsTo(model.User, { foreignKey: 'userId', as: 'user' });
model.Booking.belongsToMany(model.Mail, { through: model.BookingMail, foreignKey: 'bookingId', as: 'mails' });
model.Mail.belongsToMany(model.Booking, { through: model.BookingMail, foreignKey: 'mailId', as: 'bookings' });
model.CreditUsed.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.CreditUsed.belongsTo(model.ResourceBooking, { foreignKey: 'resourceBookingId', as: 'resourceBooking' });
model.CreditEntry.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.CreditEntry.belongsTo(model.Invoice, { foreignKey: 'invoiceId', as: 'invoice' });
model.ResourceBooking.hasOne(model.CreditUsed, { foreignKey: 'resourceBookingId', as: 'creditUsed' });
model.ResourceBooking.belongsTo(model.Resource, { foreignKey: 'resourceId', as: 'resource' });
model.ResourceBooking.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.ResourceBooking.belongsTo(model.Client, { foreignKey: 'clientId', as: 'client' });
model.Resource.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.ResourceImage.belongsTo(model.Doc, { foreignKey: 'imageId', as: 'image' });
// model.Resource.hasMany(model.ResourceImage, { foreignKey: 'resourceId', as: 'images' });
model.Contract.hasMany(model.ContractTerm, { foreignKey: 'contractId', as: 'terms' });
model.Contract.hasMany(model.BookedDesk, { foreignKey: 'contractId', as: 'bookedDesks' });
model.Contract.hasMany(model.ContractAdditionalInvoice, { foreignKey: 'contractId', as: 'additionalInvoices' });
model.ContractAdditionalInvoice.belongsTo(model.InvoiceService, { foreignKey: 'invoiceServiceId', as: 'invoiceService' });

model.Resource.belongsToMany(model.Doc, { through: model.ResourceImage, foreignKey: 'resourceId', as: 'images' });
model.Doc.belongsToMany(model.Resource, { through: model.ResourceImage, foreignKey: 'imageId', as: 'resources' });

model.Visit.belongsTo(model.Lead, { foreignKey: 'leadId', as: 'lead' });
model.Visit.belongsTo(model.User, { foreignKey: 'assignedTo', as: 'assigned' });
model.Visit.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.Visit.hasOne(model.LeadComment, { foreignKey: 'visitId', as: 'comment' });
model.Visit.hasOne(model.LeadProposition, { foreignKey: 'visitId', as: 'proposition' });
model.Call.hasOne(model.LeadComment, { foreignKey: 'callId', as: 'comment' });
model.LeadProposition.hasOne(model.LeadComment, { foreignKey: 'leadPropositionId', as: 'comment' });
model.Lead.belongsTo(model.User, { foreignKey: 'assignedTo', as: 'assigned' });
model.Lead.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
model.Lead.hasMany(model.Call, { foreignKey: 'leadId', as: 'calls' });
model.Lead.hasMany(model.Visit, { foreignKey: 'leadId', as: 'visits' });
model.Lead.hasMany(model.LeadProposition, { foreignKey: 'leadId', as: 'propositions' });
model.Lead.hasMany(model.LeadComment, { foreignKey: 'leadId', as: 'comments' });
model.LeadProposition.belongsTo(model.Lead, { foreignKey: 'leadId', as: 'lead' });
model.LeadProposition.belongsTo(model.Office, { foreignKey: 'officeId', as: 'office' });
model.LeadProposition.belongsTo(model.Visit, { foreignKey: 'visitId', as: 'visit' });
model.LeadProposition.belongsTo(model.Contract, { foreignKey: 'contractId', as: 'contract' });
model.LeadProposition.hasMany(model.PropositionQuote, { foreignKey: 'propositionId', as: 'quotes' });
model.PropositionQuote.hasMany(model.PriceQuote, { foreignKey: 'quoteId', as: 'prices' });
model.PriceContract.belongsTo(model.Contract, { foreignKey: 'contractId', as: 'contract' });

model.PriceQuote.belongsToMany(model.Contract, { through: model.PriceContract, foreignKey: 'priceId', as: 'contracts' });
model.Contract.belongsToMany(model.PriceQuote, { through: model.PriceContract, foreignKey: 'contractId', as: 'propositions' });
model.Lead.belongsToMany(model.Mail, { through: model.LeadMail, foreignKey: 'leadId', as: 'mails' });
model.Mail.belongsToMany(model.Lead, { through: model.LeadMail, foreignKey: 'mailId', as: 'leads' });

model.TicketSubCategory.belongsTo(model.TicketCategory, { foreignKey: 'categoryId', as: 'category' });
model.TicketCategory.hasMany(model.TicketSubCategory, { foreignKey: 'categoryId', as: 'subCategories' });
model.TicketSubCategory.hasMany(model.TicketContext, { foreignKey: 'subCategoryId', as: 'contexts' });
model.TicketContext.belongsTo(model.TicketSubCategory, { foreignKey: 'subCategoryId', as: 'subCategory' });
model.TicketContext.belongsTo(model.Priority, { foreignKey: 'priorityId', as: 'priority' });
model.Ticket.belongsTo(model.Booking, { foreignKey: 'bookingId', as: 'booking' });
model.Ticket.belongsTo(model.Cabin, { foreignKey: 'cabinId', as: 'cabin' });
model.Ticket.belongsTo(model.User, { foreignKey: 'assignedTo', as: 'assigned' });
model.Ticket.belongsTo(model.ClientEmployee, { foreignKey: 'clientEmployeeId', as: 'clientEmployee' });
model.Ticket.belongsTo(model.TicketContext, { foreignKey: 'contextId', as: 'ticketContext' });
model.Ticket.belongsTo(model.Priority, { foreignKey: 'priorityId', as: 'priority' });
model.Ticket.belongsTo(model.Company, { foreignKey: 'companyId', as: 'company' });
model.Ticket.belongsTo(model.TicketMessage, { foreignKey: 'lastMsgId', as: 'lastMsg' });
model.TicketMessage.belongsTo(model.Ticket, { foreignKey: 'ticketId', as: 'ticket' });
model.TicketMessage.belongsTo(model.Doc, { foreignKey: 'docId', as: 'attachment' });
model.Ticket.hasMany(model.TicketMessage, { foreignKey: 'ticketId', as: 'messages' });
model.Ticket.hasMany(model.TicketStatusHistory, { foreignKey: 'ticketId', as: 'statusHistory' });
model.Ticket.hasMany(model.TicketAssignmentHistory, { foreignKey: 'ticketId', as: 'assignmentHistory' });
model.Ticket.hasMany(model.TicketExpense, { foreignKey: 'ticketId', as: 'expenses' });
model.TicketMessage.hasOne(model.TicketExpense, { foreignKey: 'messageId', as: 'expense' });
model.TicketExpense.belongsTo(model.Ticket, { foreignKey: 'ticketId', as: 'ticket' });
model.TicketExpense.belongsTo(model.TicketMessage, { foreignKey: 'messageId', as: 'message' });
model.TicketAssignmentHistory.belongsTo(model.User, { foreignKey: 'userId', as: 'user' });
model.UserMessage.belongsTo(model.Ticket, { foreignKey: 'ticketId', as: 'ticket' });

model.Ticket.belongsToMany(model.Mail, { through: model.TicketMail, foreignKey: 'ticketId', as: 'mails' });
model.Mail.belongsToMany(model.Ticket, { through: model.TicketMail, foreignKey: 'mailId', as: 'tickets' });
model.Ticket.belongsToMany(model.Doc, { through: model.TicketAttachment, foreignKey: 'ticketId', as: 'attachments' });
model.Doc.belongsToMany(model.Ticket, { through: model.TicketAttachment, foreignKey: 'docId', as: 'tickets' });

model.VmVisit.belongsTo(model.Visitor, { foreignKey: 'visitorId', as: 'visitor' });
model.VmVisit.belongsTo(model.Subscription, { foreignKey: 'subscriptionId', as: 'subscription' });
model.Visitor.belongsTo(model.Doc, { foreignKey: 'imageId', as: 'image' });
model.Subscription.belongsTo(model.Client, { foreignKey: 'clientId', as: 'client' });

module.exports = model;